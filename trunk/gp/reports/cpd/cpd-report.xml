<?xml version="1.0" encoding="UTF-8"?>
<pmd-cpd>
<duplication lines="20" tokens="198">
<file line="27" path="C:\workspace\gp\src\test\MutationTest.java"/>
<file line="74" path="C:\workspace\gp\src\test\MutationTest.java"/>
<codefragment>
<![CDATA[
	public final void testSetRandomNodeToValue() {
		try {
			final TerminalSet terminalSet = TestHelper.getTerminalSet();
			final FunctionalSet functionalSet = TestHelper.getFunctionalSet();
			final Node root = new Node(null, "/", null, Node.OPERATOR);
			final Tree newTree = new Tree(root, terminalSet, functionalSet);
			final Node minusOperator = new Node(root, "-", Node.LEFT, Node.OPERATOR);
			newTree.addNode(minusOperator);
			final Node multiOperator = new Node(root, "*", Node.RIGHT, Node.OPERATOR);
			newTree.addNode(multiOperator);
			newTree.addNode(new Node(minusOperator, "1", Node.LEFT,
					Node.OPERAND));
			newTree.addNode(new Node(minusOperator, "3", Node.RIGHT,
					Node.OPERAND));
			newTree.addNode(new Node(multiOperator, "4", Node.LEFT,
					Node.OPERAND));
			newTree.addNode(new Node(multiOperator, "5", Node.RIGHT,
					Node.OPERAND));
			final String originalTree = newTree.getEquation().toString();
			assertEquals("Trees should be equal", "(1-3)/(4*5)", originalTree);
]]>
</codefragment>
</duplication>
<duplication lines="20" tokens="174">
<file line="223" path="C:\workspace\gp\src\gp\FindThread.java"/>
<file line="36" path="C:\workspace\gp\src\test\TestHelper.java"/>
<codefragment>
<![CDATA[
	protected static Tree generateNodes(final Tree newTree,
			final Node newParent, final int howDeepToMakeIt)
			throws GeneticProgrammingException {
		if (newParent.getLevel() == howDeepToMakeIt - 1) {
			final Node lOperand = new Node(newParent, getTerminalSet()
					.randomOperand(), Node.LEFT, Node.OPERAND);
			newTree.addNode(lOperand);
			final Node rOperand = new Node(newParent, getTerminalSet()
					.randomOperand(), Node.RIGHT, Node.OPERAND);
			newTree.addNode(rOperand);
		} else {
			final Node lOperator = new Node(newParent, getFunctionalSet()
					.randomOperator(), Node.LEFT, Node.OPERATOR);
			newTree.addNode(lOperator);
			generateNodes(newTree, lOperator, howDeepToMakeIt);
			final Node rOperator = new Node(newParent, getFunctionalSet()
					.randomOperator(), Node.RIGHT, Node.OPERATOR);
			newTree.addNode(rOperator);
			generateNodes(newTree, rOperator, howDeepToMakeIt);
		}
]]>
</codefragment>
</duplication>
<duplication lines="12" tokens="119">
<file line="65" path="C:\workspace\gp\src\test\TreeFitnessComparatorTest.java"/>
<file line="82" path="C:\workspace\gp\src\test\TreeFitnessComparatorTest.java"/>
<file line="99" path="C:\workspace\gp\src\test\TreeFitnessComparatorTest.java"/>
<file line="116" path="C:\workspace\gp\src\test\TreeFitnessComparatorTest.java"/>
<file line="133" path="C:\workspace\gp\src\test\TreeFitnessComparatorTest.java"/>
<codefragment>
<![CDATA[
		assertEquals("Tree did not get generated corectly", "(x-8)/(4*5)",
				newTree.getEquation().toString());
		trees.add(newTree);
		root = new Node(null, "/", null, Node.OPERATOR);
		newTree = new Tree(root, terminalset, functionalset);
		minusOperator = new Node(root, "-", Node.LEFT, Node.OPERATOR);
		newTree.addNode(minusOperator);
		multiOperator = new Node(root, "*", Node.RIGHT, Node.OPERATOR);
		newTree.addNode(multiOperator);
		opAOperand = new Node(minusOperator, "x", Node.LEFT, Node.OPERAND);
		newTree.addNode(opAOperand);
		opBOperand = new Node(minusOperator, "5", Node.RIGHT, Node.OPERAND);
]]>
</codefragment>
</duplication>
<duplication lines="12" tokens="100">
<file line="38" path="C:\workspace\gp\src\test\CrossoverTest.java"/>
<file line="32" path="C:\workspace\gp\src\test\MutationTest.java"/>
<codefragment>
<![CDATA[
			final Tree newTree = new Tree(root, terminalSet, functionalSet);
			final Node minusOperator = new Node(root, "-", Node.LEFT,
					Node.OPERATOR);
			newTree.addNode(minusOperator);
			final Node multiOperator = new Node(root, "*", Node.RIGHT,
					Node.OPERATOR);
			newTree.addNode(multiOperator);
			newTree.addNode(new Node(minusOperator, "1", Node.LEFT,
					Node.OPERAND));
			newTree.addNode(new Node(minusOperator, "3", Node.RIGHT,
					Node.OPERAND));
			newTree.addNode(new Node(multiOperator, "4", Node.LEFT,
]]>
</codefragment>
</duplication>
</pmd-cpd>